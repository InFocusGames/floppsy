0 info it worked if it ends with ok
1 verbose cli [ '/home/messagecris/.nvm/versions/node/v6.10.2/bin/node',
1 verbose cli   '/home/messagecris/.nvm/versions/node/v6.10.2/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.10.10
3 info using node@v6.10.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/messagecris/tifuhash',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/messagecris/.npm/tifuhash/1.0.5/package.tgz not in flight; packing
9 verbose correctMkdir /home/messagecris/.npm correctMkdir not in flight; initializing
10 info lifecycle tifuhash@1.0.5~prepublish: tifuhash@1.0.5
11 silly lifecycle tifuhash@1.0.5~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/messagecris/.npm/tifuhash/1.0.5/package.tgz',
12 verbose tar pack   '/home/messagecris/tifuhash' ]
13 verbose tarball /home/messagecris/.npm/tifuhash/1.0.5/package.tgz
14 verbose folder /home/messagecris/tifuhash
15 verbose addLocalTarball adding from inside cache /home/messagecris/.npm/tifuhash/1.0.5/package.tgz
16 verbose correctMkdir /home/messagecris/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd tifuhash@1.0.5
18 verbose afterAdd /home/messagecris/.npm/tifuhash/1.0.5/package/package.json not in flight; writing
19 verbose correctMkdir /home/messagecris/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/messagecris/.npm/tifuhash/1.0.5/package/package.json written
21 silly publish { name: 'tifuhash',
21 silly publish   version: '1.0.5',
21 silly publish   description: 'Tiny Fast Universal Hash',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/dosaygo-coder-0/tifuhash.git' },
21 silly publish   keywords:
21 silly publish    [ 'tifuhash',
21 silly publish      'hash',
21 silly publish      'universal',
21 silly publish      'smhasher',
21 silly publish      'string',
21 silly publish      'integer',
21 silly publish      'avalanche' ],
21 silly publish   author:
21 silly publish    { name: 'Kris',
21 silly publish      email: 'dontmailme@gmail.com',
21 silly publish      url: 'https://2yago.com' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/dosaygo-coder-0/tifuhash/issues' },
21 silly publish   homepage: 'https://github.com/dosaygo-coder-0/tifuhash#readme',
21 silly publish   readme: '# tifuhash\n\nTIny Floating Point Universal Hash - that\'s the aim anyway\n\n## Latest News\n\nTIFUHASH passes Dieharder, SMHashrr and PractRand. Oooh yeah!\n\nTesting on 1 Gb initially produced 1 FAILED ( rgb_lagged_sums 31 ), and I concluded this was because the test was looping the 1 Gb input so many times and finding correlations that otherwise were not present. When I truncated the input to a large prime less than 1 Gb this test passed, adding support for my theory as to why it failed. Oooh yeah!\n\n[![https://nodei.co/npm/tifuhash.png?downloads=true&downloadRank=true&stars=true](https://nodei.co/npm/tifuhash.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/tifuhash)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dosaygo-coder-0/tifuhash/issues)\n\n ```js\n const tifu = require(\'tifuhash\');\n \n const message = \'The medium is the message.\';\n const number = 333333333;\n const float = Math.PI;\n \n tifu.hash( message ); // OK\n tifu.hash( number ); // OK\n tifu.hash( float ); // OK\n tifu.hash( ); // empty message - OK\n ```\n\n# Overview\n\nTifuhash\'s unusual benefits:\n  - passes PractRand and SMHasher with 0 collissions and all bias less than 1%\n  - is a novel construction based on continued fractions and Egyptian fractions\n  - it has been bestowed the backronym "Today I fucked up Hash", and it is most likely mighty pleased \n  - it may be a candidate for a cryptographic hash. In that case, it\'s relative slowness to other hashes ( only around 100 Mb/s ) could have benefits for applications that key derivation / password hashing.\n  - its hashes are architecture dependent due to the quirks of floating point on various platforms and since it magnifies even tiny differences. This could be useful for fingerprinting hashes performed on different platforms. \n\nThe main mixing function is extraordinarily simple ( and it\'s my aim that it be memorizable ):\n\n```js\n  // Continued Fractions Hashing - q function for state update\n\n    function q( state, val, numerator, denominator ) {\n      // Continued Fraction mixed with Egyptian fraction "Continued Egyptian Fraction"\n      // with denominator = val + pos / state[1]\n      state[0] += numerator / denominator;\n      state[0] = 1.0 / state[0];\n\n      // Standard Continued Fraction with a_i = val, b_i = (a_i-1) + i + 1\n      state[1] += val;\n      state[1] = numerator / state[1];\n    }\n```\n\n# Testing Results\n\nTifuhash passes two key tests for bias: [PracRand](http://pracrand.sourceforge.net/) for RNGs and [SMHasher](https://github.com/aappleby/smhasher) for non-cryptogrpahic hash functions\n\nThe test results for SMHasher are in [tifuhash.smhasher.results.1Gb.txt](https://github.com/dosaygo-coder-0/tifuhash/blob/master/tifuhash.smhasher.results.1Gb.txt) and the results for PractRand are in [tifuhash.practrand.results.1Gb.txt](https://github.com/dosaygo-coder-0/tifuhash/blob/master/tifuhash.practrand.results.1Gb.txt)\n\n# Installing\n \n `npm install tifuhash`\n \n # Using\n \n ```js\n const tifu = require(\'tifuhash\');\n \n const message = \'The medium is the message.\';\n const number = 333333333;\n const float = Math.PI;\n \n tifu.hash( message ); // OK\n tifu.hash( number ); // OK\n tifu.hash( float ); // OK\n tifu.hash( ); // empty message - OK\n ```\n \n# Construction\n\n- Novel: Based on continued fractions and Egyptian fractions\n- Small: Uses two 64 bit floating point numbers for calculation\n- Versatile: Can hash arbitrary length string messages, integers and floats\n- Fast: Apart from using 64 bit FPA, it has only a few operations per message byte ( it can probably be efficiently implemented in hardware)\n- Amazing Properties: Somehow, this tiny, maths-operation-only hash passess PractRand ( WTF! ), when iterated on its own output and when the *entire* resulting hash stream is concatenated together to make a binary output.\n- Novel: Searching Google for "continued fraction hash algorithm" and "Egyptian fraction hash algorithm" produces no other efforts\n- Novel: using division, or using floating point division, and discarding the high-order-bits ( as we do here ) is not used nor studied so much, if at all, in hash construction\n- Universality: It can be parameterized by:\n  - Setting the initial state of the two 64 bit floats\n  - Including an additional constant summand at each step ( perhaps a different one for each 64 bit state )\n  - Including different additional summands at each step ( maybe the ouput of a LFSR )\n - Because it has good properties ( independence of bits as demonstrated by passing PractRand ), and can be parameterized, we hypothesize that it is universal, possibly even strongly universal.\n - Tiny: Yep, it\'s memorizable and only a few lines of code\n \n ## Tifuhash limitations and opportunities for improvement\n \n  - current implementations, while still fast, are very slow compared to existing top hash functions, even tho the code of tifuhash is simple\n    - this can probably be improved in optimized implementations, but floating point sets a hard limit on how fast tifuhash can be\n  - uses floating point extensively, so hashes can differ depending on implementation and architecture\n    - this may be able to be improved using techniques developed to allow other floating point dependent calculations to be reproducible across languages and architectures\n \n # Parameterization and Universality\n\n Universal hash algorithms define a family of hash algorithms. Tifuhash is designed to be universal, and while not API for parameterizing the algorithm is available yet, that will come. I think we can probably use the "seed" construction, used by SMHasher, to setup the intial state, as one way to explore parameterization. Accepting seeds into the initial state is already implemented in the C++ reference code.\n\n Also no built in method for generating real entropy in order to form parameters to universal hash parameterization, but that will probably come, or use code I developed for `dosycrypt`\n \n # Links\n\n - [tifuhash on npm](https://www.npmjs.com/package/tifuhash)\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '943c4e264e92ec04165622901b4995ab9d9902a1',
21 silly publish   _id: 'tifuhash@1.0.5',
21 silly publish   _shasum: '30d0b93a227e1209b6a0ecd006e38c7c1525327a',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name tifuhash
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'tifuhash',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'tifuhash',
26 silly mapToRegistry   name: 'tifuhash',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/tifuhash
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /home/messagecris/.npm/tifuhash/1.0.5/package.tgz
30 verbose request uri https://registry.npmjs.org/tifuhash
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 1:15:11 PM
33 verbose request using bearer token for auth
34 verbose request id ee75d1d2393fe55f
35 http request PUT https://registry.npmjs.org/tifuhash
36 http 403 https://registry.npmjs.org/tifuhash
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 17 Jun 2017 05:15:12 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-hkg6821-HKG',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1497676512.655803,VS0,VE764',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /home/messagecris/.npm/registry.npmjs.org/tifuhash on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.5." : tifuhash
40 verbose stack     at makeError (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid tifuhash
43 verbose cwd /home/messagecris/tifuhash
44 error Linux 3.16.0-4-amd64
45 error argv "/home/messagecris/.nvm/versions/node/v6.10.2/bin/node" "/home/messagecris/.nvm/versions/node/v6.10.2/bin/npm" "publish"
46 error node v6.10.2
47 error npm  v3.10.10
48 error code E403
49 error "You cannot publish over the previously published version 1.0.5." : tifuhash
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
